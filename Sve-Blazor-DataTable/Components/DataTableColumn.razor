@using System.Linq.Expressions;

@typeparam TModel

@code {
    [CascadingParameter]
    private DataTable<TModel>? DataTable { get; set; }

    [Parameter]
    public string CssClass { get; set; } = "";

    [Parameter]
    public TextAlignment TextAlignment { get; set; } = TextAlignment.Left;

    [Parameter]
    public VerticalAlignment VerticalAlignment { get; set; } = VerticalAlignment.Bottom;

    [Parameter]
    public bool IsSortable { get; set; } = false;

    [Parameter]
    public bool IsFilterable { get; set; } = false;

    [Parameter]
    public bool IncludeHeaderFilter { get; set; } = false;

    [Parameter]
    public string? CustomTitle { get; set; }

    [Parameter]
    public bool IsDefaultSortColumn { get; set; } = false;

    [Parameter]
    public SortDirection DefaultSortDirection { get; set; } = SortDirection.Ascending;

    [Parameter]
    public Expression<Func<TModel, object>>? Property { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment<TModel>? Template { get; set; }

    public Guid Guid { get; set; }

    public Type PropertyType
    {
        get
        {
            if (Property != null) return Utils.GetPropertyType(Property);
            return null;
        }
    }

    protected override Task OnInitializedAsync()
    {
        if (DataTable == null) throw new ArgumentNullException($"A 'DataTableColumn' must be a child of a 'DataTable' component");

        Guid = Guid.NewGuid();
        DataTable.AddColumn(this);

        return Task.CompletedTask;
    }

    public string GetColumnPropertyName()
    {
        if (Property != null) return Utils.GetPropertyName<TModel>(Property);
        return "";
    }

    public string GetColumnVisualPropertyName()
    {
        //Don't return custom title anymore, since it causes issues with trying to sort or filter
        if (Property != null)
        {
            string fullColumnName = GetColumnPropertyName();
            string propertyName = Utils.GetPropertyName<TModel>(Property);

            var parts = propertyName.Split('.');
            if (parts.Length > 0) return parts.Last();
        }

        return "";
    }
}
